# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:45:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint


class AuthenticationStrategy(Enum):
    SIMPLE = 'SIMPLE'
    LDAP = 'LDAP'


class BadRequestException(RootModel[Any]):
    root: Any


class BrokerState(Enum):
    CREATION_IN_PROGRESS = 'CREATION_IN_PROGRESS'
    CREATION_FAILED = 'CREATION_FAILED'
    DELETION_IN_PROGRESS = 'DELETION_IN_PROGRESS'
    RUNNING = 'RUNNING'
    REBOOT_IN_PROGRESS = 'REBOOT_IN_PROGRESS'
    CRITICAL_ACTION_REQUIRED = 'CRITICAL_ACTION_REQUIRED'


class BrokerStorageType(Enum):
    EBS = 'EBS'
    EFS = 'EFS'


class ChangeType(Enum):
    CREATE = 'CREATE'
    UPDATE = 'UPDATE'
    DELETE = 'DELETE'


class ConflictException(RootModel[Any]):
    root: Any


class CreateUserResponse(BaseModel):
    pass


class DayOfWeek(Enum):
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'
    SUNDAY = 'SUNDAY'


class DeleteBrokerRequest(BaseModel):
    pass


class DeleteTagsRequest(BaseModel):
    pass


class DeleteUserRequest(BaseModel):
    pass


class DeleteUserResponse(BaseModel):
    pass


class DeploymentMode(Enum):
    SINGLE_INSTANCE = 'SINGLE_INSTANCE'
    ACTIVE_STANDBY_MULTI_AZ = 'ACTIVE_STANDBY_MULTI_AZ'
    CLUSTER_MULTI_AZ = 'CLUSTER_MULTI_AZ'


class DescribeBrokerEngineTypesRequest(BaseModel):
    pass


class DescribeBrokerInstanceOptionsRequest(BaseModel):
    pass


class DescribeBrokerRequest(BaseModel):
    pass


class DescribeConfigurationRequest(BaseModel):
    pass


class DescribeConfigurationRevisionRequest(BaseModel):
    pass


class DescribeUserRequest(BaseModel):
    pass


class EngineType(Enum):
    ACTIVEMQ = 'ACTIVEMQ'
    RABBITMQ = 'RABBITMQ'


class ForbiddenException(RootModel[Any]):
    root: Any


class InternalServerErrorException(RootModel[Any]):
    root: Any


class ListBrokersRequest(BaseModel):
    pass


class ListConfigurationRevisionsRequest(BaseModel):
    pass


class ListConfigurationsRequest(BaseModel):
    pass


class ListTagsRequest(BaseModel):
    pass


class ListUsersRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class NotFoundException(RootModel[Any]):
    root: Any


class RebootBrokerRequest(BaseModel):
    pass


class RebootBrokerResponse(BaseModel):
    pass


class SanitizationWarningReason(Enum):
    DISALLOWED_ELEMENT_REMOVED = 'DISALLOWED_ELEMENT_REMOVED'
    DISALLOWED_ATTRIBUTE_REMOVED = 'DISALLOWED_ATTRIBUTE_REMOVED'
    INVALID_ATTRIBUTE_VALUE_REMOVED = 'INVALID_ATTRIBUTE_VALUE_REMOVED'


class UnauthorizedException(RootModel[Any]):
    root: Any


class UpdateUserResponse(BaseModel):
    pass


class FieldBoolean(RootModel[bool]):
    root: bool


class FieldInteger(RootModel[int]):
    root: int


class FieldIntegerMin5Max100(RootModel[conint(ge=5, le=100)]):
    root: conint(ge=5, le=100)


class FieldListOfDeploymentMode(RootModel[List[DeploymentMode]]):
    root: List[DeploymentMode]


class FieldString(RootModel[str]):
    root: str


class FieldTimestampIso8601(RootModel[datetime]):
    root: datetime


class Configuration1(BaseModel):
    Id: Optional[FieldString] = None
    Revision: Optional[FieldInteger] = None


class EncryptionOptions1(BaseModel):
    KmsKeyId: Optional[FieldString] = None
    UseAwsOwnedKey: Optional[FieldBoolean] = None


class Logs(BaseModel):
    Audit: Optional[FieldBoolean] = None
    General: Optional[FieldBoolean] = None


class MaintenanceWindowStartTime(BaseModel):
    DayOfWeek_1: Optional[DayOfWeek] = Field(None, alias='DayOfWeek')
    TimeOfDay: Optional[FieldString] = None
    TimeZone: Optional[FieldString] = None


class StorageType(Enum):
    EBS = 'EBS'
    EFS = 'EFS'


class V1BrokersBrokerIdUsersUsernamePostRequest(BaseModel):
    consoleAccess: Optional[bool] = Field(
        None,
        description='Enables access to the ActiveMQ Web Console for the ActiveMQ user.',
    )
    groups: Optional[List[FieldString]] = Field(
        None,
        description='The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.',
    )
    password: str = Field(
        ...,
        description='Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).',
    )


class V1BrokersBrokerIdUsersUsernamePutRequest(BaseModel):
    consoleAccess: Optional[bool] = Field(
        None,
        description='Enables access to the the ActiveMQ Web Console for the ActiveMQ user.',
    )
    groups: Optional[List[FieldString]] = Field(
        None,
        description='The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.',
    )
    password: Optional[str] = Field(
        None,
        description='The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).',
    )


class V1ConfigurationsPostRequest(BaseModel):
    authenticationStrategy: Optional[AuthenticationStrategy] = Field(
        None,
        description='Optional. The authentication strategy used to secure the broker. The default is SIMPLE.',
    )
    engineType: EngineType = Field(
        ...,
        description='The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.',
    )
    engineVersion: str = Field(
        ...,
        description='Required. The broker engine\'s version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.',
    )
    name: str = Field(
        ...,
        description='Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.',
    )
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='Create tags when creating the configuration.'
    )


class V1ConfigurationsConfigurationIdPutRequest(BaseModel):
    data: str = Field(
        ..., description='Required. The base64-encoded XML configuration.'
    )
    description: Optional[str] = Field(
        None, description='The description of the configuration.'
    )


class V1TagsResourceArnPostRequest(BaseModel):
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='The key-value pair for the resource tag.'
    )


class TagKeys(RootModel[List[FieldString]]):
    root: List[FieldString]


class ActionRequired(BaseModel):
    ActionRequiredCode: Optional[FieldString] = None
    ActionRequiredInfo: Optional[FieldString] = None


class AvailabilityZone(BaseModel):
    Name: Optional[FieldString] = None


class BrokerSummary(BaseModel):
    BrokerArn: Optional[FieldString] = None
    BrokerId: Optional[FieldString] = None
    BrokerName: Optional[FieldString] = None
    BrokerState_1: Optional[BrokerState] = Field(None, alias='BrokerState')
    Created: Optional[FieldTimestampIso8601] = None
    DeploymentMode_1: DeploymentMode = Field(..., alias='DeploymentMode')
    EngineType_1: EngineType = Field(..., alias='EngineType')
    HostInstanceType: Optional[FieldString] = None


class ConfigurationId(BaseModel):
    Id: FieldString
    Revision: Optional[FieldInteger] = None


class ConfigurationRevision(BaseModel):
    Created: FieldTimestampIso8601
    Description: Optional[FieldString] = None
    Revision: FieldInteger


class CreateBrokerResponse(BaseModel):
    BrokerArn: Optional[FieldString] = None
    BrokerId: Optional[FieldString] = None


class CreateConfigurationResponse(BaseModel):
    Arn: Optional[FieldString] = None
    AuthenticationStrategy_1: Optional[AuthenticationStrategy] = Field(
        None, alias='AuthenticationStrategy'
    )
    Created: Optional[FieldTimestampIso8601] = None
    Id: Optional[FieldString] = None
    LatestRevision: Optional[ConfigurationRevision] = None
    Name: Optional[FieldString] = None


class DeleteBrokerResponse(BaseModel):
    BrokerId: Optional[FieldString] = None


class DescribeConfigurationRevisionResponse(BaseModel):
    ConfigurationId: Optional[FieldString] = None
    Created: Optional[FieldTimestampIso8601] = None
    Data: Optional[FieldString] = None
    Description: Optional[FieldString] = None


class EncryptionOptions(BaseModel):
    KmsKeyId: Optional[FieldString] = None
    UseAwsOwnedKey: FieldBoolean


class EngineVersion(BaseModel):
    Name: Optional[FieldString] = None


class PendingLogs(BaseModel):
    Audit: Optional[FieldBoolean] = None
    General: Optional[FieldBoolean] = None


class SanitizationWarning(BaseModel):
    AttributeName: Optional[FieldString] = None
    ElementName: Optional[FieldString] = None
    Reason: SanitizationWarningReason


class UpdateConfigurationRequest(BaseModel):
    Data: FieldString
    Description: Optional[FieldString] = None


class UserSummary(BaseModel):
    PendingChange: Optional[ChangeType] = None
    Username: FieldString


class WeeklyStartTime(BaseModel):
    DayOfWeek_1: DayOfWeek = Field(..., alias='DayOfWeek')
    TimeOfDay: FieldString
    TimeZone: Optional[FieldString] = None


class FieldListOfActionRequired(RootModel[List[ActionRequired]]):
    root: List[ActionRequired]


class FieldListOfAvailabilityZone(RootModel[List[AvailabilityZone]]):
    root: List[AvailabilityZone]


class FieldListOfBrokerSummary(RootModel[List[BrokerSummary]]):
    root: List[BrokerSummary]


class FieldListOfConfigurationId(RootModel[List[ConfigurationId]]):
    root: List[ConfigurationId]


class FieldListOfConfigurationRevision(RootModel[List[ConfigurationRevision]]):
    root: List[ConfigurationRevision]


class FieldListOfEngineVersion(RootModel[List[EngineVersion]]):
    root: List[EngineVersion]


class FieldListOfSanitizationWarning(RootModel[List[SanitizationWarning]]):
    root: List[SanitizationWarning]


class FieldListOfUserSummary(RootModel[List[UserSummary]]):
    root: List[UserSummary]


class FieldListOfString(RootModel[List[FieldString]]):
    root: List[FieldString]


class FieldMapOfString(RootModel[Optional[Dict[str, FieldString]]]):
    root: Optional[Dict[str, FieldString]] = None


class LdapServerMetadata(BaseModel):
    Hosts: Optional[FieldListOfString] = None
    RoleBase: Optional[FieldString] = None
    RoleName: Optional[FieldString] = None
    RoleSearchMatching: Optional[FieldString] = None
    RoleSearchSubtree: Optional[FieldBoolean] = None
    ServiceAccountPassword: Optional[FieldString] = None
    ServiceAccountUsername: Optional[FieldString] = None
    UserBase: Optional[FieldString] = None
    UserRoleName: Optional[FieldString] = None
    UserSearchMatching: Optional[FieldString] = None
    UserSearchSubtree: Optional[FieldBoolean] = None


class V1BrokersBrokerIdPutRequest(BaseModel):
    authenticationStrategy: Optional[AuthenticationStrategy] = Field(
        None,
        description='Optional. The authentication strategy used to secure the broker. The default is SIMPLE.',
    )
    autoMinorVersionUpgrade: Optional[bool] = Field(
        None,
        description='Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.',
    )
    configuration: Optional[Configuration1] = Field(
        None,
        description='<p>A list of information about the configuration.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>',
    )
    engineVersion: Optional[str] = Field(
        None,
        description='The broker engine version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.',
    )
    hostInstanceType: Optional[str] = Field(
        None,
        description='The broker\'s host instance type to upgrade to. For a list of supported instance types, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker instance types</a>.',
    )
    ldapServerMetadata: Optional[LdapServerMetadata] = Field(
        None,
        description='<p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>',
    )
    logs: Optional[Logs] = Field(
        None,
        description='The list of information about logs to be enabled for the specified broker.',
    )
    maintenanceWindowStartTime: Optional[MaintenanceWindowStartTime] = Field(
        None,
        description='The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.',
    )
    securityGroups: Optional[List[FieldString]] = Field(
        None,
        description='The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.',
    )


class BrokerEngineType(BaseModel):
    EngineType_1: Optional[EngineType] = Field(None, alias='EngineType')
    EngineVersions: Optional[FieldListOfEngineVersion] = None


class BrokerInstance(BaseModel):
    ConsoleURL: Optional[FieldString] = None
    Endpoints: Optional[FieldListOfString] = None
    IpAddress: Optional[FieldString] = None


class BrokerInstanceOption(BaseModel):
    AvailabilityZones: Optional[FieldListOfAvailabilityZone] = None
    EngineType_1: Optional[EngineType] = Field(None, alias='EngineType')
    HostInstanceType: Optional[FieldString] = None
    StorageType: Optional[BrokerStorageType] = None
    SupportedDeploymentModes: Optional[FieldListOfDeploymentMode] = None
    SupportedEngineVersions: Optional[FieldListOfString] = None


class Configuration(BaseModel):
    Arn: FieldString
    AuthenticationStrategy_1: AuthenticationStrategy = Field(
        ..., alias='AuthenticationStrategy'
    )
    Created: FieldTimestampIso8601
    Description: FieldString
    EngineType_1: EngineType = Field(..., alias='EngineType')
    EngineVersion: FieldString
    Id: FieldString
    LatestRevision: ConfigurationRevision
    Name: FieldString
    Tags: Optional[FieldMapOfString] = None


class Configurations(BaseModel):
    Current: Optional[ConfigurationId] = None
    History: Optional[FieldListOfConfigurationId] = None
    Pending: Optional[ConfigurationId] = None


class CreateConfigurationRequest(BaseModel):
    AuthenticationStrategy_1: Optional[AuthenticationStrategy] = Field(
        None, alias='AuthenticationStrategy'
    )
    EngineType_1: EngineType = Field(..., alias='EngineType')
    EngineVersion: FieldString
    Name: FieldString
    Tags: Optional[FieldMapOfString] = None


class CreateTagsRequest(BaseModel):
    Tags: Optional[FieldMapOfString] = None


class CreateUserRequest(BaseModel):
    ConsoleAccess: Optional[FieldBoolean] = None
    Groups: Optional[FieldListOfString] = None
    Password: FieldString


class DescribeConfigurationResponse(BaseModel):
    Arn: Optional[FieldString] = None
    AuthenticationStrategy_1: Optional[AuthenticationStrategy] = Field(
        None, alias='AuthenticationStrategy'
    )
    Created: Optional[FieldTimestampIso8601] = None
    Description: Optional[FieldString] = None
    EngineType_1: Optional[EngineType] = Field(None, alias='EngineType')
    EngineVersion: Optional[FieldString] = None
    Id: Optional[FieldString] = None
    LatestRevision: Optional[ConfigurationRevision] = None
    Name: Optional[FieldString] = None
    Tags: Optional[FieldMapOfString] = None


class LdapServerMetadataInput(BaseModel):
    Hosts: FieldListOfString
    RoleBase: FieldString
    RoleName: Optional[FieldString] = None
    RoleSearchMatching: FieldString
    RoleSearchSubtree: Optional[FieldBoolean] = None
    ServiceAccountPassword: FieldString
    ServiceAccountUsername: FieldString
    UserBase: FieldString
    UserRoleName: Optional[FieldString] = None
    UserSearchMatching: FieldString
    UserSearchSubtree: Optional[FieldBoolean] = None


class LdapServerMetadataOutput(BaseModel):
    Hosts: FieldListOfString
    RoleBase: FieldString
    RoleName: Optional[FieldString] = None
    RoleSearchMatching: FieldString
    RoleSearchSubtree: Optional[FieldBoolean] = None
    ServiceAccountUsername: FieldString
    UserBase: FieldString
    UserRoleName: Optional[FieldString] = None
    UserSearchMatching: FieldString
    UserSearchSubtree: Optional[FieldBoolean] = None


class ListBrokersResponse(BaseModel):
    BrokerSummaries: Optional[FieldListOfBrokerSummary] = None
    NextToken: Optional[FieldString] = None


class ListConfigurationRevisionsResponse(BaseModel):
    ConfigurationId: Optional[FieldString] = None
    MaxResults: Optional[FieldInteger] = None
    NextToken: Optional[FieldString] = None
    Revisions: Optional[FieldListOfConfigurationRevision] = None


class ListTagsResponse(BaseModel):
    Tags: Optional[FieldMapOfString] = None


class ListUsersResponse(BaseModel):
    BrokerId: Optional[FieldString] = None
    MaxResults: Optional[FieldIntegerMin5Max100] = None
    NextToken: Optional[FieldString] = None
    Users: Optional[FieldListOfUserSummary] = None


class LogsSummary(BaseModel):
    Audit: Optional[FieldBoolean] = None
    AuditLogGroup: Optional[FieldString] = None
    General: FieldBoolean
    GeneralLogGroup: FieldString
    Pending: Optional[PendingLogs] = None


class UpdateBrokerRequest(BaseModel):
    AuthenticationStrategy_1: Optional[AuthenticationStrategy] = Field(
        None, alias='AuthenticationStrategy'
    )
    AutoMinorVersionUpgrade: Optional[FieldBoolean] = None
    Configuration: Optional[ConfigurationId] = None
    EngineVersion: Optional[FieldString] = None
    HostInstanceType: Optional[FieldString] = None
    LdapServerMetadata: Optional[LdapServerMetadataInput] = None
    Logs_1: Optional[Logs] = Field(None, alias='Logs')
    MaintenanceWindowStartTime: Optional[WeeklyStartTime] = None
    SecurityGroups: Optional[FieldListOfString] = None


class UpdateBrokerResponse(BaseModel):
    AuthenticationStrategy_1: Optional[AuthenticationStrategy] = Field(
        None, alias='AuthenticationStrategy'
    )
    AutoMinorVersionUpgrade: Optional[FieldBoolean] = None
    BrokerId: Optional[FieldString] = None
    Configuration: Optional[ConfigurationId] = None
    EngineVersion: Optional[FieldString] = None
    HostInstanceType: Optional[FieldString] = None
    LdapServerMetadata: Optional[LdapServerMetadataOutput] = None
    Logs_1: Optional[Logs] = Field(None, alias='Logs')
    MaintenanceWindowStartTime: Optional[WeeklyStartTime] = None
    SecurityGroups: Optional[FieldListOfString] = None


class UpdateConfigurationResponse(BaseModel):
    Arn: Optional[FieldString] = None
    Created: Optional[FieldTimestampIso8601] = None
    Id: Optional[FieldString] = None
    LatestRevision: Optional[ConfigurationRevision] = None
    Name: Optional[FieldString] = None
    Warnings: Optional[FieldListOfSanitizationWarning] = None


class UpdateUserRequest(BaseModel):
    ConsoleAccess: Optional[FieldBoolean] = None
    Groups: Optional[FieldListOfString] = None
    Password: Optional[FieldString] = None


class User(BaseModel):
    ConsoleAccess: Optional[FieldBoolean] = None
    Groups: Optional[FieldListOfString] = None
    Password: FieldString
    Username: FieldString


class UserPendingChanges(BaseModel):
    ConsoleAccess: Optional[FieldBoolean] = None
    Groups: Optional[FieldListOfString] = None
    PendingChange: ChangeType


class FieldListOfBrokerEngineType(RootModel[List[BrokerEngineType]]):
    root: List[BrokerEngineType]


class FieldListOfBrokerInstance(RootModel[List[BrokerInstance]]):
    root: List[BrokerInstance]


class FieldListOfBrokerInstanceOption(RootModel[List[BrokerInstanceOption]]):
    root: List[BrokerInstanceOption]


class FieldListOfConfiguration(RootModel[List[Configuration]]):
    root: List[Configuration]


class FieldListOfUser(RootModel[List[User]]):
    root: List[User]


class V1BrokersPostRequest(BaseModel):
    authenticationStrategy: Optional[AuthenticationStrategy] = Field(
        None,
        description='Optional. The authentication strategy used to secure the broker. The default is SIMPLE.',
    )
    autoMinorVersionUpgrade: bool = Field(
        ...,
        description='Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. Set to true by default, if no value is specified.',
    )
    brokerName: str = Field(
        ...,
        description="Required. The broker's name. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.",
    )
    configuration: Optional[Configuration1] = Field(
        None,
        description='<p>A list of information about the configuration.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>',
    )
    creatorRequestId: Optional[str] = Field(
        None,
        description="The unique ID that the requester receives for the created broker. Amazon MQ passes your ID with the API action. Note: We recommend using a Universally Unique Identifier (UUID) for the creatorRequestId. You may omit the creatorRequestId if your application doesn't require idempotency.",
    )
    deploymentMode: DeploymentMode = Field(
        ..., description="The broker's deployment mode."
    )
    encryptionOptions: Optional[EncryptionOptions1] = Field(
        None,
        description='<important><p>Does not apply to RabbitMQ brokers.</p></important> <p>Encryption options for the broker.</p>',
    )
    engineType: EngineType = Field(
        ...,
        description='The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.',
    )
    engineVersion: str = Field(
        ...,
        description='Required. The broker engine\'s version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.',
    )
    hostInstanceType: str = Field(
        ..., description="Required. The broker's instance type."
    )
    ldapServerMetadata: Optional[LdapServerMetadata] = Field(
        None,
        description='<p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>',
    )
    logs: Optional[Logs] = Field(
        None,
        description='The list of information about logs to be enabled for the specified broker.',
    )
    maintenanceWindowStartTime: Optional[MaintenanceWindowStartTime] = Field(
        None,
        description='The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.',
    )
    publiclyAccessible: bool = Field(
        ...,
        description="Enables connections from applications outside of the VPC that hosts the broker's subnets. Set to false by default, if no value is provided.",
    )
    securityGroups: Optional[List[FieldString]] = Field(
        None,
        description='The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.',
    )
    storageType: Optional[StorageType] = Field(
        None,
        description="<p>The broker's storage type.</p> <important><p>EFS is not supported for RabbitMQ engine type.</p></important>",
    )
    subnetIds: Optional[List[FieldString]] = Field(
        None,
        description='<p>The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no subnet requirements when deployed with public accessibility. Deployment without public accessibility requires at least one subnet.</p> <important><p>If you specify subnets in a <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html">shared VPC</a> for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account. Amazon MQ will not be able to create VPC endpoints in VPCs that are not owned by your AWS account.</p></important>',
    )
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='Create tags when creating the broker.'
    )
    users: List[User] = Field(
        ...,
        description='<p>Required. The list of broker users (persons or applications) who can access queues and topics. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p> <important><title>Amazon MQ for RabbitMQ</title> <p>When you create an Amazon MQ for RabbitMQ broker, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.</p></important>',
    )


class CreateBrokerRequest(BaseModel):
    AuthenticationStrategy_1: Optional[AuthenticationStrategy] = Field(
        None, alias='AuthenticationStrategy'
    )
    AutoMinorVersionUpgrade: FieldBoolean
    BrokerName: FieldString
    Configuration: Optional[ConfigurationId] = None
    CreatorRequestId: Optional[FieldString] = None
    DeploymentMode_1: DeploymentMode = Field(..., alias='DeploymentMode')
    EncryptionOptions_1: Optional[EncryptionOptions] = Field(
        None, alias='EncryptionOptions'
    )
    EngineType_1: EngineType = Field(..., alias='EngineType')
    EngineVersion: FieldString
    HostInstanceType: FieldString
    LdapServerMetadata: Optional[LdapServerMetadataInput] = None
    Logs_1: Optional[Logs] = Field(None, alias='Logs')
    MaintenanceWindowStartTime: Optional[WeeklyStartTime] = None
    PubliclyAccessible: FieldBoolean
    SecurityGroups: Optional[FieldListOfString] = None
    StorageType: Optional[BrokerStorageType] = None
    SubnetIds: Optional[FieldListOfString] = None
    Tags: Optional[FieldMapOfString] = None
    Users: FieldListOfUser


class DescribeBrokerEngineTypesResponse(BaseModel):
    BrokerEngineTypes: Optional[FieldListOfBrokerEngineType] = None
    MaxResults: Optional[FieldIntegerMin5Max100] = None
    NextToken: Optional[FieldString] = None


class DescribeBrokerInstanceOptionsResponse(BaseModel):
    BrokerInstanceOptions: Optional[FieldListOfBrokerInstanceOption] = None
    MaxResults: Optional[FieldIntegerMin5Max100] = None
    NextToken: Optional[FieldString] = None


class DescribeBrokerResponse(BaseModel):
    ActionsRequired: Optional[FieldListOfActionRequired] = None
    AuthenticationStrategy_1: Optional[AuthenticationStrategy] = Field(
        None, alias='AuthenticationStrategy'
    )
    AutoMinorVersionUpgrade: Optional[FieldBoolean] = None
    BrokerArn: Optional[FieldString] = None
    BrokerId: Optional[FieldString] = None
    BrokerInstances: Optional[FieldListOfBrokerInstance] = None
    BrokerName: Optional[FieldString] = None
    BrokerState_1: Optional[BrokerState] = Field(None, alias='BrokerState')
    Configurations_1: Optional[Configurations] = Field(None, alias='Configurations')
    Created: Optional[FieldTimestampIso8601] = None
    DeploymentMode_1: Optional[DeploymentMode] = Field(None, alias='DeploymentMode')
    EncryptionOptions_1: Optional[EncryptionOptions] = Field(
        None, alias='EncryptionOptions'
    )
    EngineType_1: Optional[EngineType] = Field(None, alias='EngineType')
    EngineVersion: Optional[FieldString] = None
    HostInstanceType: Optional[FieldString] = None
    LdapServerMetadata: Optional[LdapServerMetadataOutput] = None
    Logs: Optional[LogsSummary] = None
    MaintenanceWindowStartTime: Optional[WeeklyStartTime] = None
    PendingAuthenticationStrategy: Optional[AuthenticationStrategy] = None
    PendingEngineVersion: Optional[FieldString] = None
    PendingHostInstanceType: Optional[FieldString] = None
    PendingLdapServerMetadata: Optional[LdapServerMetadataOutput] = None
    PendingSecurityGroups: Optional[FieldListOfString] = None
    PubliclyAccessible: Optional[FieldBoolean] = None
    SecurityGroups: Optional[FieldListOfString] = None
    StorageType: Optional[BrokerStorageType] = None
    SubnetIds: Optional[FieldListOfString] = None
    Tags: Optional[FieldMapOfString] = None
    Users: Optional[FieldListOfUserSummary] = None


class DescribeUserResponse(BaseModel):
    BrokerId: Optional[FieldString] = None
    ConsoleAccess: Optional[FieldBoolean] = None
    Groups: Optional[FieldListOfString] = None
    Pending: Optional[UserPendingChanges] = None
    Username: Optional[FieldString] = None


class ListConfigurationsResponse(BaseModel):
    Configurations: Optional[FieldListOfConfiguration] = None
    MaxResults: Optional[FieldInteger] = None
    NextToken: Optional[FieldString] = None
